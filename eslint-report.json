[{"filePath":"D:\\OneDrive - Krish Compusoft Services Pvt Ltd\\NodeJs\\Sports\\.eslintrc.js","messages":[{"ruleId":"eslint-rules/no-log","message":"Definition for rule 'eslint-rules/no-log' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = {\r\n  env: {\r\n    node: true,\r\n  },\r\n  plugins: ['eslint-rules'],\r\n  rules: {\r\n    'eslint-rules/no-log': 'error',\r\n  },\r\n};\r\n\r\n  ","usedDeprecatedRules":[]},{"filePath":"D:\\OneDrive - Krish Compusoft Services Pvt Ltd\\NodeJs\\Sports\\combinedReports\\lcov-report\\block-navigation.js","messages":[],"suppressedMessages":[{"ruleId":"eslint-rules/no-log","message":"Definition for rule 'eslint-rules/no-log' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\OneDrive - Krish Compusoft Services Pvt Ltd\\NodeJs\\Sports\\combinedReports\\lcov-report\\prettify.js","messages":[],"suppressedMessages":[{"ruleId":"eslint-rules/no-log","message":"Definition for rule 'eslint-rules/no-log' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\OneDrive - Krish Compusoft Services Pvt Ltd\\NodeJs\\Sports\\combinedReports\\lcov-report\\sorter.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'const' is reserved","line":28,"column":9,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable */\nvar addSorting = (function() {\n    'use strict';\n    var cols,\n        currentSort = {\n            index: 0,\n            desc: false\n        };\n\n    // returns the summary table element\n    function getTable() {\n        return document.querySelector('.coverage-summary');\n    }\n    // returns the thead element of the summary table\n    function getTableHeader() {\n        return getTable().querySelector('thead tr');\n    }\n    // returns the tbody element of the summary table\n    function getTableBody() {\n        return getTable().querySelector('tbody');\n    }\n    // returns the th element for nth column\n    function getNthColumn(n) {\n        return getTableHeader().querySelectorAll('th')[n];\n    }\n\n    function onFilterInput() {\n        const searchValue = document.getElementById('fileSearch').value;\n        const rows = document.getElementsByTagName('tbody')[0].children;\n        for (let i = 0; i < rows.length; i++) {\n            const row = rows[i];\n            if (\n                row.textContent\n                    .toLowerCase()\n                    .includes(searchValue.toLowerCase())\n            ) {\n                row.style.display = '';\n            } else {\n                row.style.display = 'none';\n            }\n        }\n    }\n\n    // loads the search box\n    function addSearchBox() {\n        var template = document.getElementById('filterTemplate');\n        var templateClone = template.content.cloneNode(true);\n        templateClone.getElementById('fileSearch').oninput = onFilterInput;\n        template.parentElement.appendChild(templateClone);\n    }\n\n    // loads all columns\n    function loadColumns() {\n        var colNodes = getTableHeader().querySelectorAll('th'),\n            colNode,\n            cols = [],\n            col,\n            i;\n\n        for (i = 0; i < colNodes.length; i += 1) {\n            colNode = colNodes[i];\n            col = {\n                key: colNode.getAttribute('data-col'),\n                sortable: !colNode.getAttribute('data-nosort'),\n                type: colNode.getAttribute('data-type') || 'string'\n            };\n            cols.push(col);\n            if (col.sortable) {\n                col.defaultDescSort = col.type === 'number';\n                colNode.innerHTML =\n                    colNode.innerHTML + '<span class=\"sorter\"></span>';\n            }\n        }\n        return cols;\n    }\n    // attaches a data attribute to every tr element with an object\n    // of data values keyed by column name\n    function loadRowData(tableRow) {\n        var tableCols = tableRow.querySelectorAll('td'),\n            colNode,\n            col,\n            data = {},\n            i,\n            val;\n        for (i = 0; i < tableCols.length; i += 1) {\n            colNode = tableCols[i];\n            col = cols[i];\n            val = colNode.getAttribute('data-value');\n            if (col.type === 'number') {\n                val = Number(val);\n            }\n            data[col.key] = val;\n        }\n        return data;\n    }\n    // loads all row data\n    function loadData() {\n        var rows = getTableBody().querySelectorAll('tr'),\n            i;\n\n        for (i = 0; i < rows.length; i += 1) {\n            rows[i].data = loadRowData(rows[i]);\n        }\n    }\n    // sorts the table using the data for the ith column\n    function sortByIndex(index, desc) {\n        var key = cols[index].key,\n            sorter = function(a, b) {\n                a = a.data[key];\n                b = b.data[key];\n                return a < b ? -1 : a > b ? 1 : 0;\n            },\n            finalSorter = sorter,\n            tableBody = document.querySelector('.coverage-summary tbody'),\n            rowNodes = tableBody.querySelectorAll('tr'),\n            rows = [],\n            i;\n\n        if (desc) {\n            finalSorter = function(a, b) {\n                return -1 * sorter(a, b);\n            };\n        }\n\n        for (i = 0; i < rowNodes.length; i += 1) {\n            rows.push(rowNodes[i]);\n            tableBody.removeChild(rowNodes[i]);\n        }\n\n        rows.sort(finalSorter);\n\n        for (i = 0; i < rows.length; i += 1) {\n            tableBody.appendChild(rows[i]);\n        }\n    }\n    // removes sort indicators for current column being sorted\n    function removeSortIndicators() {\n        var col = getNthColumn(currentSort.index),\n            cls = col.className;\n\n        cls = cls.replace(/ sorted$/, '').replace(/ sorted-desc$/, '');\n        col.className = cls;\n    }\n    // adds sort indicators for current column being sorted\n    function addSortIndicators() {\n        getNthColumn(currentSort.index).className += currentSort.desc\n            ? ' sorted-desc'\n            : ' sorted';\n    }\n    // adds event listeners for all sorter widgets\n    function enableUI() {\n        var i,\n            el,\n            ithSorter = function ithSorter(i) {\n                var col = cols[i];\n\n                return function() {\n                    var desc = col.defaultDescSort;\n\n                    if (currentSort.index === i) {\n                        desc = !currentSort.desc;\n                    }\n                    sortByIndex(i, desc);\n                    removeSortIndicators();\n                    currentSort.index = i;\n                    currentSort.desc = desc;\n                    addSortIndicators();\n                };\n            };\n        for (i = 0; i < cols.length; i += 1) {\n            if (cols[i].sortable) {\n                // add the click event handler on the th so users\n                // dont have to click on those tiny arrows\n                el = getNthColumn(i).querySelector('.sorter').parentElement;\n                if (el.addEventListener) {\n                    el.addEventListener('click', ithSorter(i));\n                } else {\n                    el.attachEvent('onclick', ithSorter(i));\n                }\n            }\n        }\n    }\n    // adds sorting functionality to the UI\n    return function() {\n        if (!getTable()) {\n            return;\n        }\n        cols = loadColumns();\n        loadData();\n        addSearchBox();\n        addSortIndicators();\n        enableUI();\n    };\n})();\n\nwindow.addEventListener('load', addSorting);\n","usedDeprecatedRules":[]},{"filePath":"D:\\OneDrive - Krish Compusoft Services Pvt Ltd\\NodeJs\\Sports\\cypress.config.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'const' is reserved","line":1,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { defineConfig } = require(\"cypress\");\r\n\r\nmodule.exports = defineConfig({\r\n  projectId: \"7qguxw\",\r\n  e2e: {\r\n    setupNodeEvents(on, config) {\r\n      return config;\r\n    },\r\n    baseUrl: \"http://localhost:8001\",\r\n    specPattern: \"cypress/e2e/**/*spec.js\",\r\n    nodeVersion: \"system\",\r\n    screenshotOnRunFailure: false,\r\n    chromeWebSecurity: false,\r\n    video: false,\r\n    reporter: \"cypress-mochawesome-reporter\",\r\n    reporterOptions: {\r\n      reportDir: \"cypress/reports\",\r\n      charts: true,\r\n      quite: true,\r\n      overwrite: false,\r\n      html: false,\r\n      json: true,\r\n    },\r\n  },\r\n  env: {\r\n    codeCoverage: {\r\n      url: \"http://localhost:3000/api/__coverage__\",\r\n    },\r\n  },\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\OneDrive - Krish Compusoft Services Pvt Ltd\\NodeJs\\Sports\\cypress\\e2e\\API\\index.spec.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token )","line":1,"column":28,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"describe('Event handlers',()=>{\r\n\r\n    it('Should return event data',()=>{\r\n        cy.request({\r\n            method : \"GET\",\r\n            url : `http://localhost:8001/`,\r\n            failOnStatusCode : false\r\n        }).as(\"response\")\r\n\r\n        cy.get(\"@response\")\r\n        .its(\"status\").should(\"equal\",200);\r\n    })\r\n\r\n    it('Should return about page',()=>{\r\n        cy.request({\r\n            method : \"GET\",\r\n            url : `http://localhost:8001/about`,\r\n            failOnStatusCode: false\r\n        }).as(\"response\")\r\n\r\n        cy.get(\"@response\")\r\n        .its(\"status\").should(\"equal\",200);\r\n    })\r\n\r\n    it('Should return error message when url is invalid url',()=>{\r\n        cy.request({\r\n            method : \"GET\",\r\n            url : `http://localhost:8001/about/hvg`,\r\n            failOnStatusCode: false\r\n        }).as(\"response\")\r\n\r\n        cy.get(\"@response\")\r\n        .its(\"status\").should(\"equal\",404);\r\n    })\r\n\r\n    it('Should return error message when url is invalid url base url',()=>{\r\n        cy.request({\r\n            method : \"GET\",\r\n            url : `http://localhost:8001/hvg`,\r\n            failOnStatusCode: false\r\n        }).as(\"response\")\r\n\r\n        cy.get(\"@response\")\r\n        .its(\"status\").should(\"equal\",404);\r\n    })\r\n\r\n    it('Should return sports details',()=>{\r\n        cy.request({\r\n            method : \"GET\",\r\n            url : `http://localhost:8001/sports/14`,\r\n            failOnStatusCode: false\r\n        }).as(\"response\")\r\n\r\n        cy.get(\"@response\")\r\n        .its(\"status\").should(\"equal\",200);\r\n    })\r\n\r\n\r\n})\r\n\r\nmodule.exports = {}","usedDeprecatedRules":[]},{"filePath":"D:\\OneDrive - Krish Compusoft Services Pvt Ltd\\NodeJs\\Sports\\cypress\\support\\commands.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token )","line":39,"column":13,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"cypress\" />\r\n// ***********************************************\r\n// This example commands.ts shows you how to\r\n// create various custom commands and overwrite\r\n// existing commands.\r\n//\r\n// For more comprehensive examples of custom\r\n// commands please read more here:\r\n// https://on.cypress.io/custom-commands\r\n// ***********************************************\r\n//\r\n//\r\n// -- This is a parent command --\r\n// Cypress.Commands.add('login', (email, password) => { ... })\r\n//\r\n//\r\n// -- This is a child command --\r\n// Cypress.Commands.add('drag', { prevSubject: 'element'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This is a dual command --\r\n// Cypress.Commands.add('dismiss', { prevSubject: 'optional'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This will overwrite an existing command --\r\n// Cypress.Commands.overwrite('visit', (originalFn, url, options) => { ... })\r\n//\r\n// declare global {\r\n//   namespace Cypress {\r\n//     interface Chainable {\r\n//       login(email: string, password: string): Chainable<void>\r\n//       drag(subject: string, options?: Partial<TypeOptions>): Chainable<Element>\r\n//       dismiss(subject: string, options?: Partial<TypeOptions>): Chainable<Element>\r\n//       visit(originalFn: CommandOriginalFn, url: string, options: Partial<VisitOptions>): Chainable<Element>\r\n//     }\r\n//   }\r\n// }\r\n\r\nbeforeEach(() => {\r\n  \r\n  localStorage.setItem(\"Address_Valid_Id\", \"646b3087326054919cf88839\");\r\n  localStorage.setItem(\"Address_Invalid_Id\", \"646b87326054919cf88839\");\r\n  localStorage.setItem(\"Address_Delete_Id\", \"6461ffcc56765bf2c64bf93a\");\r\n\r\n});\r\n\r\nexport {};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\OneDrive - Krish Compusoft Services Pvt Ltd\\NodeJs\\Sports\\cypress\\support\\e2e.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Assigning to rvalue","line":21,"column":34,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// ***********************************************************\r\n// This example support/e2e.ts is processed and\r\n// loaded automatically before your test files.\r\n//\r\n// This is a great place to put global configuration and\r\n// behavior that modifies Cypress.\r\n//\r\n// You can change the location of this file or turn off\r\n// automatically serving support files with the\r\n// 'supportFile' configuration option.\r\n//\r\n// You can read more here:\r\n// https://on.cypress.io/configuration\r\n// ***********************************************************\r\n\r\n// Import commands.js using ES2015 syntax:\r\nrequire ('./commands.js')\r\nrequire (\"@cypress/code-coverage/support\");\r\n// Alternatively you can use CommonJS syntax:\r\n// require('./commands')\r\nCypress.on(\"uncaught:exception\", (err, runnable) => {\r\n    return false;\r\n  });","usedDeprecatedRules":[]},{"filePath":"D:\\OneDrive - Krish Compusoft Services Pvt Ltd\\NodeJs\\Sports\\cypress\\support\\index.js","messages":[{"ruleId":"eslint-rules/no-log","message":"Definition for rule 'eslint-rules/no-log' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"require(\"@cypress/code-coverage/support\")","usedDeprecatedRules":[]},{"filePath":"D:\\OneDrive - Krish Compusoft Services Pvt Ltd\\NodeJs\\Sports\\eslint-rules\\no-log.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token (","line":13,"column":21,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = {\r\n  meta: {\r\n    type: \"suggestion\",\r\n    docs: {\r\n      description: \"Disallow console.log() in production code\",\r\n      category: \"Best Practices\",\r\n      recommended: true,\r\n    },\r\n    schema: [],\r\n  },\r\n  create: function (context) {\r\n    return {\r\n      CallExpression(node) {\r\n        const { callee } = node;\r\n        if (\r\n          callee.type === \"MemberExpression\" &&\r\n          callee.object &&\r\n          callee.object.name === \"console\" &&\r\n          callee.property &&\r\n          callee.property.name === \"log\"\r\n        ) {\r\n          context.report({\r\n            node,\r\n            message: \"Avoid using console.log() in production code.\",\r\n          });\r\n        }\r\n      },\r\n    };\r\n  },\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\OneDrive - Krish Compusoft Services Pvt Ltd\\NodeJs\\Sports\\src\\Api\\Events.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'const' is reserved","line":1,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const axios = require('axios')\r\n\r\nconst events = (s_id, result) => {\r\n    const parameters = {\r\n        method: 'GET',\r\n        url: 'https://flashlive-sports.p.rapidapi.com/v1/events/list',\r\n        params:\r\n        {\r\n            locale: 'en_INT',\r\n            sport_id: s_id,\r\n            indent_days: '0',\r\n            timezone: '-4'\r\n        },\r\n        headers: {\r\n            'X-RapidAPI-Key': '39ee93099amsh90a94bf48362163p15e903jsnc3338d887776',\r\n            'X-RapidAPI-Host': 'flashlive-sports.p.rapidapi.com'\r\n        }\r\n    };\r\n\r\n    axios.request(parameters).then((response) => {\r\n        result(null, response.data)\r\n\r\n    }).catch((error) => {\r\n        //If there is a problem with internet connection\r\n        if (error.code == 'ENOTFOUND') {\r\n            result((error, { errorMsg: 'Could not reach , Please check your internet connection ' }), null)\r\n        }\r\n        //If user enter Invalid AccessKey\r\n        else if (error.code == 'ERR_BAD_REQUEST' && error.response.status == 400) {\r\n            result((error, { errorMsg: 'Invalid Host name , Please check !!' }), null)\r\n        }\r\n        //If user enter Invalid Accesskey\r\n        else if (error.code == 'ERR_BAD_REQUEST' && error.response.status == 403) {\r\n            result((error, { errorMsg: 'Invalid Access key , Please check !!' }), null)\r\n        }\r\n        //If Montly subscription is expired \r\n        else if (error.code == 'ERR_BAD_REQUEST' && error.response.status == 429) {\r\n            result((error, { errorMsg: 'Your Free Api usege is end , Please upgrade your plan !!' }))\r\n        }\r\n        \r\n        else {\r\n            result(error.message)\r\n        }\r\n    });\r\n}\r\n\r\n\r\nmodule.exports = events\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\OneDrive - Krish Compusoft Services Pvt Ltd\\NodeJs\\Sports\\src\\index.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'const' is reserved","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"//Import require modules\r\nconst express = require('express');\r\n\r\n/**Remove below line to avoid code smells */\r\nconst hbs = require('hbs')\r\nconst page = require('../public/stylesheets/style.css')\r\n\r\nconst path = require('path')\r\nconst logger = require('morgan')\r\nrequire('colors')\r\n\r\n//Import required files\r\nconst event = require('../src/Api/Events')\r\n\r\n//assign express functions in app \r\nconst app = express()\r\n\r\n//Defain static file's path\r\nconst staticAssests = path.join(__dirname, '../public')\r\nconst partials = path.join(__dirname, '../template/partials')\r\nconst views = path.join(__dirname, '../template/views')\r\n\r\n\r\n//Register hbs partials modules\r\n// hbs.registerPartials(partials);\r\n\r\n//Integrate static files with hbs view engine\r\napp.use(express.static(staticAssests))\r\napp.set(\"views\", views)\r\napp.set(\"view engine\", \"hbs\")\r\n\r\n//implement morgan with dev option\r\napp.use(logger('dev'))\r\n\r\n\r\n\r\n//Response parsing to callback \r\nfunction cricket(req, res, next) {\r\n    event(13, (err, rows) => {\r\n        if (err) {\r\n            return res.render('error', { msg: err.errorMsg })\r\n        }\r\n        req.CricketApi = rows.DATA[2]\r\n        next();\r\n    })\r\n}\r\n\r\nfunction hokey(req, res, next) {\r\n    event(4, (err, rows) => {\r\n        if (err) {\r\n            return res.render('error', { msg: err.errorMsg })\r\n        }\r\n        req.HokeyApi = rows.DATA[1]\r\n        next();\r\n\r\n    })\r\n}\r\n\r\nfunction tableTannis(req, res, next) {\r\n\r\n    event(25, (err, rows) => {\r\n        if (err) {\r\n            return res.render('error', { msg: err.errorMsg })\r\n        }\r\n        req.tableTannisApi = rows.DATA[1]\r\n        next();\r\n    })\r\n\r\n}\r\n\r\nfunction pas23Repo(){\r\n    // code\r\n}\r\npas23Repo();\r\n\r\n//Routes \r\n\r\napp.get('/', tableTannis, cricket, hokey, (req, res) => {\r\n    res.status(200).json({\r\n        Data : {\r\n            TableTanisPayload : req.tableTannisApi,\r\n            CricketPayload : req.CricketApi,\r\n            HokeyPayload : req.HokeyApi   \r\n        },\r\n        message : \"Data retrieved successfully.\"\r\n    })\r\n})\r\n\r\napp.get('/about', (req, res) => {\r\n    res.status(200).json({\r\n        message : \"About us page render successfully..\"\r\n    })\r\n})\r\n\r\napp.get('/sports/:id', (req, res) => {\r\n    const params = req.params.id;\r\n    try {  \r\n        event(params, (err, rows) => {\r\n            if (err) {\r\n                return res.render('error', { msg: err.errorMsg })\r\n            }\r\n            res.status(200).json({\r\n                data : rows.DATA,\r\n                message : \"Data retrieved successfully\"\r\n            })\r\n            \r\n        })\r\n        \r\n    } catch (error) {\r\n        res.status(500).json({\r\n            message : error.message\r\n        })\r\n    }\r\n\r\n})\r\n\r\n\r\n// catch unhandle page\r\n\r\napp.get('/about/*', (req, res) => {\r\n    res.status(404).json({\r\n        message : \"Resource not found !!\"\r\n    })\r\n})\r\n\r\napp.get('/*', (req, res) => {\r\n    res.status(404).json({message : \"Resorce not found\"})\r\n})\r\n\r\n//Listen the server\r\napp.listen(8001, () => {\r\n    console.log('Server is Running......'.yellow.bold)\r\n})","usedDeprecatedRules":[]}]